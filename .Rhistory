"ATC",
"ATCVersion",
"CTCAEGrade",
"CTCAEType",
"CTCAEVersion")
}
# Create table of events for every CDS table, incorporating values / features defined above
if (!(is.null(Table) | length(Table) == 0 | nrow(Table) == 0))
{
if (length(GroupingFeature) == 1) { TableEventData <- Table %>% group_by(PatientID) }
else { TableEventData <- Table %>% group_by(PatientID, DiagnosisID) }
TableEventData <- TableEventData %>%
arrange(!!sym(DateFeature), .by_group = TRUE) %>%
mutate(EventType = Val_EventType,
EventDate = !!sym(DateFeature),
EventDateIsAdjusted = FALSE,      # In case event date is adjusted later for plausibility reasons
EventClass = Val_EventClass,
EventSubclass = Val_EventSubclass,
EventSubclassRank = row_number(),
EventOrderSignificance = case_when(row_number() == 1 ~ paste("First", Val_EventSubclass),
row_number() == n() ~ paste("Last", Val_EventSubclass),
TRUE ~ NA_character_)) %>%
{ if (!is.null(EndDateFeature))
{ mutate(., EventDateEnd = !!sym(EndDateFeature), .after = EventDate) }      # For events of type "Period"
else {.}
} %>%
nest(EventDetails = all_of(EventDetailsFeatures)) %>%
ungroup() %>%
select(all_of(GroupingFeature),
starts_with("Event"))
return(TableEventData)
}
else { return(NULL) }
}) %>%
list_rbind()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3) Consolidate Event data from CDS tables in one coherent table
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SubclassOrder <- c("BioSampling" = 1,
"Histology" = 2,
"MolecularDiagnostics" = 3,
"InitialDiagnosis" = 4,
"Staging" = 5,
"Metastasis" = 6,
"DiseaseStatus" = 7,
"Surgery" = 8,
"SystemicTherapy" = 9,
"RadiationTherapy" = 10,
"LastVitalStatus" = 11)
ADS$Events <- ADS$Events %>%
bind_rows(EventData) %>%
mutate(SubclassOrder = SubclassOrder[EventSubclass]) %>%
group_by(PatientID) %>%
fill(DateOfBirth,
.direction = "downup") %>%
group_by(PatientID, DiagnosisID) %>%
filter(!is.na(EventDate)) %>%
arrange(EventDate, SubclassOrder, .by_group = TRUE) %>%
# Important adjustment!
mutate(FirstEventDate = min(EventDate, na.rm = TRUE),
LastEventDate = max(EventDate, na.rm = TRUE),
EventDateIsAdjusted = case_when(EventSubclass == "InitialDiagnosis" & EventDate > FirstEventDate ~ TRUE,
EventClass == "VitalStatus" & EventDate < LastEventDate ~ TRUE,
.default = FALSE),
EventDate = case_when(EventSubclass == "InitialDiagnosis" ~ FirstEventDate,
EventClass == "VitalStatus" ~ LastEventDate,
.default = EventDate),
InitialDiagnosisDate = FirstEventDate) %>%
arrange(EventDate, .by_group = TRUE) %>%      # Sort by date again after possible date adjustments
mutate(EventRank = row_number(),
EventDaysSinceDiagnosis = round(as.numeric(difftime(EventDate, InitialDiagnosisDate, units = "days")), digits = 1),
EventPatientAge = floor(time_length(difftime(EventDate, DateOfBirth), unit = "years"))) %>%
group_by(PatientID, DiagnosisID, EventClass) %>%
mutate(EventClassRank = row_number()) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
InitialDiagnosisDate,
EventRank,
EventType,
EventDate,
EventDateEnd,
EventClass,
EventClassRank,
EventSubclass,
EventSubclassRank,
EventOrderSignificance,
EventDateIsAdjusted,
EventPatientAge,
EventDaysSinceDiagnosis,
EventDetails,
SubclassOrder) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
#Temporary
# UnnestedEvents <- df_ADS_Events %>%
#                       unnest(cols = c(EventDetails), keep_empty = TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 4) Enhance ADS$Events with engineered features (customizable through function argument / meta data)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#--- Set up progress bar -------------------------------------------------------
# CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
# ProgressBar <- progress_bar$new(format = "Engineering event data [:bar] :percent in :elapsed  :spin",
#                                 total = CountProgressItems, clear = FALSE, width= 100)
# #-------------------------------------------------------------------------------
# ADS$Events <- ADS$Events %>%
#                   group_by(PatientID, DiagnosisID) %>%
#                       unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
#                       group_modify( ~ CreateEventFeatures(EventData = .x,
#                                                           RuleSet = Settings$EventFeatures$RuleSet,
#                                                           Profile = Settings$EventFeatures$Profile,
#                                                           ProgressBarObject = ProgressBar))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE C)  Generate ADS$DiseaseCourse
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Auxiliary function
AssignComparatorCodes <- function(ValueVector, FeatureName)
{
# Get value to comparator code matches from meta data
ComparatorCodeData <- dsCCPhos::Meta_Values %>%
filter(Feature == FeatureName) %>%
select(Value_Curated, ComparatorCode)
# Create named vector
ComparatorCodes <- set_names(ComparatorCodeData$ComparatorCode,
ComparatorCodeData$Value_Curated)
# Use named vector to transform original values into comparator codes
return(suppressWarnings(as.integer(ComparatorCodes[ValueVector])))
}
ColumnNamesStaging <- ADS$Events %>%
filter(EventSubclass == "Staging") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
colnames()
InitialDiseaseStatus <- ADS$Events %>%
filter(EventClass == "Therapy" | (EventSubclass == "Staging" & EventSubclassRank == 1)) %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
mutate(HadTherapy = case_when(EventClass == "Therapy" ~ TRUE,
.default = NA)) %>%
group_by(PatientID, DiagnosisID) %>%
fill(HadTherapy, .direction = "down") %>%
mutate(HadTherapy = replace_na(HadTherapy, FALSE)) %>%
ungroup() %>%
filter(EventSubclass == "Staging") %>%
mutate(IsLikelyInitialStaging = (HadTherapy == FALSE & EventDaysSinceDiagnosis < Settings$CutoffValues$DaysDiagnosisToInitialStaging),
PrimarySiteStatus_Initial = case_when(TNM_T == 0 ~ 0,
.default = 1),
LymphnodalStatus_Initial = case_when(str_starts(TNM_N, "0") ~ 0,
.default = 1),
MetastasisStatus_Initial = case_when(str_starts(TNM_M, "0") ~ 0,
.default = 1)) %>%
select(all_of(ColumnNamesStaging),
IsLikelyInitialStaging,
PrimarySiteStatus_Initial,
LymphnodalStatus_Initial,
MetastasisStatus_Initial)
ColumnNamesDiseaseStatus <- ADS$Events %>%
filter(EventSubclass == "DiseaseStatus") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
colnames()
ADS$DiseaseCourse <- ADS$Events %>%
filter(EventSubclass == "DiseaseStatus") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
bind_rows(InitialDiseaseStatus) %>%
mutate(PrimarySiteStatus_Comp = case_when(EventSubclass == "Staging" ~ PrimarySiteStatus_Initial,
.default = AssignComparatorCodes(PrimarySiteStatus, "PrimarySiteStatus")),
LymphnodalStatus_Comp = case_when(EventSubclass == "Staging" ~ LymphnodalStatus_Initial,
.default = AssignComparatorCodes(LymphnodalStatus, "LymphnodalStatus")),
MetastasisStatus_Comp = case_when(EventSubclass == "Staging" ~ MetastasisStatus_Initial,
.default = AssignComparatorCodes(MetastasisStatus, "MetastasisStatus"))) %>%
group_by(PatientID, DiagnosisID) %>%
arrange(EventDate, SubclassOrder, .by_group = TRUE) %>%
mutate(PrimarySiteStatus_Diff = PrimarySiteStatus_Comp - lag(PrimarySiteStatus_Comp),
LymphnodalStatus_Diff = LymphnodalStatus_Comp - lag(LymphnodalStatus_Comp),
MetastasisStatus_Diff = MetastasisStatus_Comp - lag(MetastasisStatus_Comp)) %>%
ungroup() %>%
mutate(PrimarySiteChange = case_when(PrimarySiteStatus_Diff == 0 ~ "Stable",
PrimarySiteStatus_Diff < 0 ~ "Regression",
PrimarySiteStatus_Diff > 0 ~ "Progression",
.default = "Unclear"),
LymphnodalChange = case_when(LymphnodalStatus_Diff == 0 ~ "Stable",
LymphnodalStatus_Diff < 0 ~ "Regression",
LymphnodalStatus_Diff > 0 ~ "Progression",
.default = "Unclear"),
MetastasisChange = case_when(MetastasisStatus_Diff == 0 ~ "Stable",
MetastasisStatus_Diff < 0 ~ "Regression",
MetastasisStatus_Diff > 0 ~ "Progression",
.default = "Unclear"),
IsProgression = case_when(GlobalStatus %in% c("D", "P") ~ TRUE,
PrimarySiteStatus %in% c("rpT", "R") | LymphnodalStatus %in% c("pL", "L") | MetastasisStatus %in% c("pM", "M") ~ TRUE,
PrimarySiteChange == "Progression" | LymphnodalChange == "Progression" | MetastasisChange == "Progression" ~ TRUE,
.default = FALSE),
IsContradiction = GlobalStatus %in% c("CR", "CRr") & IsProgression == TRUE,
IsResponse = case_when(GlobalStatus %in% c("CR", "CRr", "PartRemission", "MinResp") ~ TRUE,
IsProgression == TRUE ~ FALSE,
IsContradiction == TRUE ~ NA,
is.na(GlobalStatus) & (PrimarySiteChange == "Regression" |
LymphnodalChange == "Regression" |
MetastasisChange == "Regression") ~ TRUE,
.default = FALSE),
IsStableDisease = case_when(GlobalStatus == "NC" ~ TRUE,
(is.na(GlobalStatus) &
(PrimarySiteChange == "Stable" & LymphnodalChange == "Stable" & MetastasisChange == "Stable")) ~ TRUE,
.default = FALSE),
IsInRemission = case_when(GlobalStatus %in% c("CR", "CRr", "PartRemission") ~ TRUE,
is.na(GlobalStatus) & (PrimarySiteStatus == "N" & LymphnodalStatus == "N" & MetastasisStatus == "N") ~ TRUE,
.default = FALSE),
IsNewRemission = case_when(IsInRemission == TRUE & (PrimarySiteChange == "Regression" | LymphnodalChange == "Regression" | MetastasisChange == "Regression") ~ TRUE,
.default = FALSE),
IsStableRemission = case_when(IsInRemission == TRUE & (PrimarySiteChange == "Stable" & LymphnodalChange == "Stable" & MetastasisChange == "Stable") ~ TRUE,
.default = FALSE)) %>%
filter(EventSubclass == "DiseaseStatus") %>%
select(all_of(ColumnNamesDiseaseStatus),
PrimarySiteChange,
LymphnodalChange,
MetastasisChange,
IsProgression,
IsContradiction,
IsResponse,
IsStableDisease,
IsInRemission,
IsNewRemission,
IsStableRemission)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE D)  Generate ADS$Therapy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# TO DO:
# - Group therapies (same chemotherapy, adjuvant/neoadjuvant therapy, time-wise distance, etc)
# - Classify into lines of therapy
ColumnNamesTherapy <- ADS$Events %>%
filter(EventClass == "Therapy") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
colnames()
ADS$Therapy <- ADS$Events %>%
filter(EventClass == "Therapy") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
mutate(IsTherapyOfInterest = if_all(all_of(names(Settings$TherapyOfInterest)), ~ .x == Settings$TherapyOfInterest[[cur_column()]]),
AssociatedTherapyID = EventClassRank,
AssociatedTherapyDate = EventDate) %>%
bind_rows(ADS$DiseaseCourse) %>%
group_by(PatientID, DiagnosisID) %>%
arrange(EventDate, SubclassOrder, .by_group = TRUE) %>%      # Sort again by EventDate and SubclassOrder
fill(AssociatedTherapyID, .direction = "down") %>%
fill(AssociatedTherapyDate, .direction = "down") %>%
mutate(TimeSinceTherapy = round(as.numeric(difftime(EventDate, AssociatedTherapyDate, units = "days")), digits = 1)) %>%
group_by(PatientID, DiagnosisID, AssociatedTherapyID) %>%
mutate(HasResponse = any(IsResponse, na.rm = TRUE),
TimeToResponse = TimeSinceTherapy[which(IsResponse == TRUE)[1]],
TimeToRemission = TimeSinceTherapy[which(IsInRemission == TRUE)[1]],
TimeToRelapse = TimeSinceTherapy[which(IsProgression == TRUE)[1]]) %>%
ungroup() %>%
filter(EventClass == "Therapy") %>%
select(all_of(ColumnNamesTherapy),
IsTherapyOfInterest,
HasResponse,
TimeToResponse,
TimeToRemission,
TimeToRelapse)
# TherapySummary <- ADS$Therapy %>%
#                       summarize()
# Features in ADS$Therapy
# FirstTherapyType
# FirstTherapyLatency   (Abstand Diagnose - FirstTherapy)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MODULE E)  Generate ADS$Diagnosis
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Summarizing event data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
View(df_Aux_DiagnosisSummary_Events)
View(ADS$Events)
View((ADS$Events)[[17]][[22]])
View((ADS$Events)[[17]][[22]])
View((ADS$Events)[[17]][[36]])
devtools::load_all(".")
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
?if_else
### For function testing purposes
EventData <- ADS$Events %>%
filter(PatientID == "Pat_2063") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE)
View(EventData)
EventData$EventDaysSinceDiagnosis[LastVitalStatus == "Deceased"]
EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Deceased"]
EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Alive"]
first(EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Alive"])
coalesce(EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Alive"])
?first
first(EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Alive"], na_rm = TRUE)
devtools::load_all(".")
devtools::load_all(".")
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Summarizing event data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
View(df_Aux_DiagnosisSummary_Events)
devtools::load_all(".")
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Summarizing event data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
View(df_Aux_DiagnosisSummary_Events)
devtools::load_all(".")
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Summarizing event data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
View(df_Aux_DiagnosisSummary_Events)
View(df_Aux_DiagnosisSummary_Events)
View(df_Aux_DiagnosisSummary_Events)
View(ADS$Events)
View((ADS$Events)[[17]][[22]])
View((ADS$Events)[[17]][[72]])
View((ADS$Events)[[17]][[77]])
Test <- ADS$Events %>% unnest(cols(EventDetails), keep_empty = TRUE)
Test <- ADS$Events %>% unnest(cols = EventDetails, keep_empty = TRUE)
View(Test)
EventData <- ADS$Events %>%
filter(PatientID == "Pat_10390") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE)
View(EventData)
Output <- EventData %>%
summarize(PatientAgeAtDiagnosis = first(EventPatientAge[EventSubclass == "InitialDiagnosis"]),      # !!! TEMPORARY? !!! If multiple "InitialDiagnosis" entries occur (Which shouldn't be), select only the first
#---------------------------------------------------
TimeDiagnosisToDeath = ifelse("Deceased" %in% LastVitalStatus,
first(EventDaysSinceDiagnosis[LastVitalStatus == "Deceased"], na_rm = FALSE),
NA_integer_),
TimeFollowUp = case_when(!is.na(TimeDiagnosisToDeath) ~ TimeDiagnosisToDeath,
!all(is.na(EventDaysSinceDiagnosis)) ~ max(EventDaysSinceDiagnosis, na.rm = TRUE),
.default = NA_integer_),
IsDocumentedDeceased = case_when(!is.na(TimeDiagnosisToDeath) ~ TRUE,
.default = FALSE))
View(Output)
View(EventData)
"Deceased" %in% EventData$LastVitalStatus
first(EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Deceased"], na_rm = FALSE)
EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Deceased"]
Output <- EventData %>%
summarize(PatientAgeAtDiagnosis = first(EventPatientAge[EventSubclass == "InitialDiagnosis"]),      # !!! TEMPORARY? !!! If multiple "InitialDiagnosis" entries occur (Which shouldn't be), select only the first
#---------------------------------------------------
TimeDiagnosisToDeath = ifelse("Deceased" %in% LastVitalStatus,
first(EventDaysSinceDiagnosis[LastVitalStatus == "Deceased"], na_rm = FALSE),
NA),
TimeFollowUp = case_when(!is.na(TimeDiagnosisToDeath) ~ TimeDiagnosisToDeath,
!all(is.na(EventDaysSinceDiagnosis)) ~ max(EventDaysSinceDiagnosis, na.rm = TRUE),
.default = NA_integer_),
IsDocumentedDeceased = case_when(!is.na(TimeDiagnosisToDeath) ~ TRUE,
.default = FALSE))
EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Deceased"]
first(EventData$EventDaysSinceDiagnosis[EventData$LastVitalStatus == "Deceased"], na_rm = TRUE)
Output <- EventData %>%
summarize(PatientAgeAtDiagnosis = first(EventPatientAge[EventSubclass == "InitialDiagnosis"]),      # !!! TEMPORARY? !!! If multiple "InitialDiagnosis" entries occur (Which shouldn't be), select only the first
#---------------------------------------------------
TimeDiagnosisToDeath = ifelse("Deceased" %in% LastVitalStatus,
first(EventDaysSinceDiagnosis[LastVitalStatus == "Deceased"], na_rm = TRUE),
NA_integer_),
TimeFollowUp = case_when(!is.na(TimeDiagnosisToDeath) ~ TimeDiagnosisToDeath,
!all(is.na(EventDaysSinceDiagnosis)) ~ max(EventDaysSinceDiagnosis, na.rm = TRUE),
.default = NA_integer_),
IsDocumentedDeceased = case_when(!is.na(TimeDiagnosisToDeath) ~ TRUE,
.default = FALSE))
View(Output)
devtools::load_all(".")
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Summarizing event data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
View(df_Aux_DiagnosisSummary_Events)
devtools::load_all(".")
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- ADS$Events %>% select(PatientID, DiagnosisID) %>% n_distinct()
ProgressBar <- progress_bar$new(format = "Summarizing event data [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width= 100)
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- ADS$Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventData = .x,
ProgressBarObject = ProgressBar)) %>%
ungroup()
View(df_Aux_DiagnosisSummary_Events)
devtools::load_all(".")
CDS <- CurationOutput$CuratedDataSet
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CDS")
ADS <- AugmentationOutput$AugmentedDataSet
ADS_Patient <- ADS$Patient
ADS_Diagnosis <- ADS$Diagnosis
Analysis <- JoinTablesDS(TableNameA.S = "ADS_Patient",
TableNameB.S = "ADS_Diagnosis",
ByStatement.S = "PatientID")
library(devtools)
# dataSHIELD ASSIGN functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("AugmentDataDS")
# use_r("CurateDataDS")
# use_r("ExcludeRawDataDS")
# use_r("ExcludeAugmentedDataDS")
# use_r("ExcludeCuratedDataDS")
# use_r("ExtractFromListDS")
use_r("FilterTableDS")
View(ADS_Patient)
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_Tables$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization = list(Profile = "Default"),
FeatureObligations = list(Profile = "Default"),
FeatureTracking = list(Profile = "Default")))
CDS <- CurationOutput$CuratedDataSet
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CDS")
ADS <- AugmentationOutput$AugmentedDataSet
ADS_Patient <- ADS$Patient
ADS_Diagnosis <- ADS$Diagnosis
View(ADS_Patient)
ADS_Patient <- FilterTableDS(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses")
ADS_Patient <- FilterTableDS(TableName = "ADS_Patient",
FilterStatement = "CountDiagnoses")
devtools::load_all(".")
ADS_Patient <- FilterTableDS(TableName.S = "ADS_Patient",
FilterStatement.S = "CountDiagnoses")
ADS_Patient <- FilterTableDS(TableName.S = "ADS_Patient",
FilterStatement.S = "CountDiagnoses == 1")
View(ADS_Patient)
devtools::load_all(".")
devtools::load_all(".")
library(devtools)
install.packages("tidyverse")
install.packages("DSOpal")
install.packages("DSI")
install.packages("MatchIt")
install.packages("validate")
install.packages("cli")
