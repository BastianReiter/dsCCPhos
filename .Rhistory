{
try(ProgressBar$tick())
GroupingFeature <- NULL
DateFeature <- NULL
EndDateFeature <- NULL
Val_EventType <- NA
Val_EventClass <- NA
Val_EventSubclass <- NA
EventDetailsFeatures <- NULL
if (tablename == "BioSampling")
{
GroupingFeature <- "PatientID"
DateFeature <- "BioSamplingDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Sample Taking"
EventDetailsFeatures <- c("Aliquot",
"Type",
"Status",
"Quantity",
"Unit",
"ProjectName")
}
if (tablename == "Histology")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "HistologyDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Histology"
EventDetailsFeatures = c("ICDOMorphologyCode",
"ICDOMorphologyVersion",
"Grading",
"ICDOMorphologyComment")
}
if (tablename == "Metastasis")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "MetastasisDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Metastasis"
EventDetailsFeatures = c("HasMetastasis",
"Localization")
}
if (tablename == "MolecularDiagnostics")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "MolecularDiagnosticsDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Molecular Diagnostics"
EventDetailsFeatures = c("MolecularMarker",
"MolecularMarkerStatus",
"Documentation")
}
if (tablename == "Progress")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "ProgressDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Progress"
EventDetailsFeatures = c("GlobalStatus",
"PrimarySiteStatus",
"LymphnodalStatus",
"MetastasisStatus")
}
if (tablename == "RadiationTherapy")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "RadiationTherapyStartDate"
EndDateFeature <- "RadiationTherapyEndDate"
Val_EventType <- "Period"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "Radiation Therapy"
EventDetailsFeatures = c("Intention",
"RelationToSurgery")
}
if (tablename == "Staging")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "StagingDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Staging"
EventDetailsFeatures = c("UICCStage",
"TNM_T_Prefix",
"TNM_T",
"TNM_N_Prefix",
"TNM_N",
"TNM_M_Prefix",
"TNM_M",
"TNM_mSymbol",
"TNM_rSymbol",
"TNM_ySymbol",
"TNMVersion",
"TNM_L",
"TNM_V",
"TNM_Pn",
"TNM_S")
}
if (tablename == "Surgery")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "SurgeryDate"
Val_EventType <- "Point"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "Surgery"
EventDetailsFeatures = c("Intention",
"OPSCode",
"ResidualAssessmentLocal",
"ResidualAssessmentTotal")
}
if (tablename == "SystemicTherapy")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "SystemicTherapyStartDate"
EndDateFeature <- "SystemicTherapyEndDate"
Val_EventType <- "Period"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "SystemicTherapy"
EventDetailsFeatures = c("Intention",
"Substances",
"RelationToSurgery")
}
if (!(is.null(Table) | length(Table) == 0 | nrow(Table) == 0))
{
if (length(GroupingFeature) == 1) { TableEventData <- Table %>% group_by(PatientID) }
else { TableEventData <- Table %>% group_by(PatientID, DiagnosisID) }
TableEventData <- TableEventData %>%
arrange(!!sym(DateFeature), .by_group = TRUE) %>%
mutate(EventType = Val_EventType,
EventDate = !!sym(DateFeature),
EventDateIsAdjusted = FALSE,      # In case event date is adjusted later for plausibility reasons
EventClass = Val_EventClass,
EventSubclass = Val_EventSubclass,
EventRankWithinSubclass = row_number(),
EventOrderSignificance = case_when(row_number() == 1 ~ paste("First", Val_EventSubclass),
row_number() == n() ~ paste("Last", Val_EventSubclass),
TRUE ~ NA_character_)) %>%
{ if (!is.null(EndDateFeature))
{ mutate(., EventDateEnd = !!sym(EndDateFeature), .after = EventDate) }      # For events of type "Period"
else {.}
} %>%
nest(EventDetails = all_of(EventDetailsFeatures)) %>%
ungroup() %>%
select(all_of(GroupingFeature),
starts_with("Event"))
return(TableEventData)
}
else { return(NULL) }
}) %>%
list_rbind()
# Consolidate Event-oriented data from CDS tables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_ADS_Events <- df_ADS_Events %>%
bind_rows(EventData) %>%
group_by(PatientID) %>%
fill(DateOfBirth,
.direction = "downup") %>%
group_by(PatientID, DiagnosisID) %>%
filter(!is.na(EventDate)) %>%
arrange(EventDate, .by_group = TRUE) %>%
# Important adjustment!
mutate(FirstEventDate = min(EventDate, na.rm = TRUE),
LastEventDate = max(EventDate, na.rm = TRUE),
EventDateIsAdjusted = case_when(EventSubclass == "InitialDiagnosis" & EventDate > FirstEventDate ~ TRUE,
EventClass == "VitalStatus" & EventDate < LastEventDate ~ TRUE,
.default = FALSE),
EventDate = case_when(EventSubclass == "InitialDiagnosis" ~ FirstEventDate,
EventClass == "VitalStatus" ~ LastEventDate,
.default = EventDate),
InitialDiagnosisDate = FirstEventDate,
EventRank = row_number(),
EventDaysSinceDiagnosis = round(as.numeric(difftime(EventDate, InitialDiagnosisDate, units = "days")), digits = 1),
EventPatientAge = floor(time_length(difftime(EventDate, DateOfBirth), unit = "years"))) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
InitialDiagnosisDate,
EventRank,
EventType,
EventDate,
EventDateEnd,
EventDateIsAdjusted,
EventPatientAge,
EventDaysSinceDiagnosis,
EventClass,
EventSubclass,
EventRankWithinSubclass,
EventOrderSignificance,
EventDetails) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_Tables$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
RuleProfile_RawDataHarmonization.S = "Default",
PerformDiagnosisRedundancyCheck = TRUE,
RuleProfile_DiagnosisRedundancy.S = "Default",
PerformDiagnosisAssociationCheck = TRUE,
RuleProfile_DiagnosisAssociation.S = "Default")
CDS <- CurationOutput$CuratedDataSet
# Use require() to load package namespaces
require(dplyr)
require(lubridate)
require(purrr)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate output objects
ls_AugmentedDataSet <- NULL
ls_AugmentationReport <- NULL
# Initiate Messaging objects
Messages <- list()
Messages$CheckAugmentationCompletion <- "red"
Messages$FinalMessage <- "Augmentation not completed"
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- 17
ProgressBar <- progress_bar$new(format = "Generating diagnosis-related events [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
# Initiate df_ADS_Events, integrating patient-specific and initial diagnosis events
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Initiation 1: Initial diagnosis event
df_ADS_Events <- CDS$Patient %>%
right_join(CDS$Diagnosis, join_by(PatientID)) %>%
filter(IsReferenceEntry == TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
mutate(EventType = "Point",
EventDate = DiagnosisDate,
EventDateEnd = NULL,      # For events of type "Period"
EventDateIsAdjusted = FALSE,      # In case event date is adjusted later for plausibility reasons
EventClass = "Diagnosis",
EventSubclass = "InitialDiagnosis",
EventRankWithinSubclass = row_number(),
EventOrderSignificance = NULL) %>%
nest(EventDetails = c(ICD10Code,
ICDOTopographyCode,
ICDOMorphologyCode,
Grading)) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
DiagnosisDate,
starts_with("Event"))
#--- Update PB ---
try(ProgressBar$tick())
# Initiation 2: Last known vital status
df_Events_LastVitalStatus <- CDS$Patient %>%
right_join(CDS$Diagnosis, join_by(PatientID)) %>%
filter(IsReferenceEntry == TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
mutate(EventType = "Point",
EventDate = LastVitalStatusDate,
EventDateIsAdjusted = FALSE,
EventClass = "VitalStatus",
EventSubclass = if_else(is.na(LastVitalStatus), "Unknown", LastVitalStatus)) %>%
nest(EventDetails = c(DeathCancerRelated,
CausesOfDeath)) %>%
ungroup() %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
DiagnosisDate,
starts_with("Event"))
#--- Update PB ---
try(ProgressBar$tick())
# Initiation 3: Row-bind data frames from Initiation 1 and 2
df_ADS_Events <- df_ADS_Events %>%
bind_rows(df_Events_LastVitalStatus)
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Loop through CDS tables to generate event data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EventData <- CDS[names(CDS) %in% c("Patient", "Diagnosis") == FALSE] %>%      # Deselect tables 'Patient' and 'Diagnosis' from CDS
imap(function(Table, tablename)
{
try(ProgressBar$tick())
GroupingFeature <- NULL
DateFeature <- NULL
EndDateFeature <- NULL
Val_EventType <- NA
Val_EventClass <- NA
Val_EventSubclass <- NA
EventDetailsFeatures <- NULL
if (tablename == "BioSampling")
{
GroupingFeature <- "PatientID"
DateFeature <- "BioSamplingDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Sample Taking"
EventDetailsFeatures <- c("Aliquot",
"Type",
"Status",
"Quantity",
"Unit",
"ProjectName")
}
if (tablename == "Histology")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "HistologyDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Histology"
EventDetailsFeatures = c("ICDOMorphologyCode",
"ICDOMorphologyVersion",
"Grading",
"ICDOMorphologyComment")
}
if (tablename == "Metastasis")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "MetastasisDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Metastasis"
EventDetailsFeatures = c("HasMetastasis",
"Localization")
}
if (tablename == "MolecularDiagnostics")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "MolecularDiagnosticsDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Molecular Diagnostics"
EventDetailsFeatures = c("MolecularMarker",
"MolecularMarkerStatus",
"Documentation")
}
if (tablename == "Progress")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "ProgressDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Progress"
EventDetailsFeatures = c("GlobalStatus",
"PrimarySiteStatus",
"LymphnodalStatus",
"MetastasisStatus")
}
if (tablename == "RadiationTherapy")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "RadiationTherapyStartDate"
EndDateFeature <- "RadiationTherapyEndDate"
Val_EventType <- "Period"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "Radiation Therapy"
EventDetailsFeatures = c("Intention",
"RelationToSurgery")
}
if (tablename == "Staging")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "StagingDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Staging"
EventDetailsFeatures = c("UICCStage",
"TNM_T_Prefix",
"TNM_T",
"TNM_N_Prefix",
"TNM_N",
"TNM_M_Prefix",
"TNM_M",
"TNM_mSymbol",
"TNM_rSymbol",
"TNM_ySymbol",
"TNMVersion",
"TNM_L",
"TNM_V",
"TNM_Pn",
"TNM_S")
}
if (tablename == "Surgery")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "SurgeryDate"
Val_EventType <- "Point"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "Surgery"
EventDetailsFeatures = c("Intention",
"OPSCode",
"ResidualAssessmentLocal",
"ResidualAssessmentTotal")
}
if (tablename == "SystemicTherapy")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "SystemicTherapyStartDate"
EndDateFeature <- "SystemicTherapyEndDate"
Val_EventType <- "Period"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "SystemicTherapy"
EventDetailsFeatures = c("Intention",
"Substances",
"RelationToSurgery")
}
if (!(is.null(Table) | length(Table) == 0 | nrow(Table) == 0))
{
if (length(GroupingFeature) == 1) { TableEventData <- Table %>% group_by(PatientID) }
else { TableEventData <- Table %>% group_by(PatientID, DiagnosisID) }
TableEventData <- TableEventData %>%
arrange(!!sym(DateFeature), .by_group = TRUE) %>%
mutate(EventType = Val_EventType,
EventDate = !!sym(DateFeature),
EventDateIsAdjusted = FALSE,      # In case event date is adjusted later for plausibility reasons
EventClass = Val_EventClass,
EventSubclass = Val_EventSubclass,
EventRankWithinSubclass = row_number(),
EventOrderSignificance = case_when(row_number() == 1 ~ paste("First", Val_EventSubclass),
row_number() == n() ~ paste("Last", Val_EventSubclass),
TRUE ~ NA_character_)) %>%
{ if (!is.null(EndDateFeature))
{ mutate(., EventDateEnd = !!sym(EndDateFeature), .after = EventDate) }      # For events of type "Period"
else {.}
} %>%
nest(EventDetails = all_of(EventDetailsFeatures)) %>%
ungroup() %>%
select(all_of(GroupingFeature),
starts_with("Event"))
return(TableEventData)
}
else { return(NULL) }
}) %>%
list_rbind()
# Consolidate Event-oriented data from CDS tables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_ADS_Events <- df_ADS_Events %>%
bind_rows(EventData) %>%
group_by(PatientID) %>%
fill(DateOfBirth,
.direction = "downup") %>%
group_by(PatientID, DiagnosisID) %>%
filter(!is.na(EventDate)) %>%
arrange(EventDate, .by_group = TRUE) %>%
# Important adjustment!
mutate(FirstEventDate = min(EventDate, na.rm = TRUE),
LastEventDate = max(EventDate, na.rm = TRUE),
EventDateIsAdjusted = case_when(EventSubclass == "InitialDiagnosis" & EventDate > FirstEventDate ~ TRUE,
EventClass == "VitalStatus" & EventDate < LastEventDate ~ TRUE,
.default = FALSE),
EventDate = case_when(EventSubclass == "InitialDiagnosis" ~ FirstEventDate,
EventClass == "VitalStatus" ~ LastEventDate,
.default = EventDate),
InitialDiagnosisDate = FirstEventDate,
EventRank = row_number(),
EventDaysSinceDiagnosis = round(as.numeric(difftime(EventDate, InitialDiagnosisDate, units = "days")), digits = 1),
EventPatientAge = floor(time_length(difftime(EventDate, DateOfBirth), unit = "years"))) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
InitialDiagnosisDate,
EventRank,
EventType,
EventDate,
EventDateEnd,
EventDateIsAdjusted,
EventPatientAge,
EventDaysSinceDiagnosis,
EventClass,
EventSubclass,
EventRankWithinSubclass,
EventOrderSignificance,
EventDetails) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
View(df_ADS_Events)
# For function testing purposes
EventEntries <- df_ADS_Events %>%
filter(PatientID == "Pat_105431") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE)
View(df_ADS_Events)
View(CDS$SystemicTherapy)
View(RawDataSet$RDS_SystemicTherapy)
# For function testing purposes
EventEntries <- df_ADS_Events %>%
filter(PatientID == "Pat_2063") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE)
View(EventEntries)
View(CDS$Metastasis)
View(CDS$Progress)
View(RawDataSet$RDS_Progress)
