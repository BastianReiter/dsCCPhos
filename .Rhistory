View(CohortSize_OverTime)
?factor
Characteristics <- list(# Cohort Size
Size = CohortData %>%
summarize(PatientCount = n_distinct(PatientID),
DiagnosisCount = n_distinct(DiagnosisID)) %>%
mutate(DiagnosesPerPatient = DiagnosisCount / PatientCount),
# Gender
Gender = CohortDataSingleDiag %>%
group_by(Gender) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N)),
# Age Groups
Age = CohortDataSingleDiag %>%
select(PatientID, DiagnosisID, DiagnosisDate, PatientAgeAtDiagnosis) %>%
mutate(AgeGroup = case_when(PatientAgeAtDiagnosis < 18 ~ "< 18",
PatientAgeAtDiagnosis %>% between(18, 29) ~ "18 - 29",
PatientAgeAtDiagnosis %>% between(30, 39) ~ "30 - 39",
PatientAgeAtDiagnosis %>% between(40, 49) ~ "40 - 49",
PatientAgeAtDiagnosis %>% between(50, 59) ~ "50 - 59",
PatientAgeAtDiagnosis %>% between(60, 69) ~ "60 - 69",
PatientAgeAtDiagnosis %>% between(70, 79) ~ "70 - 79",
PatientAgeAtDiagnosis %>% between(80, 89) ~ "80 - 89",
PatientAgeAtDiagnosis > 89 ~ "> 89"),
AgeGroup = factor(AgeGroup,
levels = c("< 18", "18 - 29", "30 - 39", "40 - 49", "50 - 59", "60 - 69", "70 - 79", "80 - 89", "> 89"),
ordered = TRUE)) %>%
group_by(AgeGroup) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N)))
Characteristics$Age
Characteristics <- list(# Cohort Size
Size = CohortData %>%
summarize(PatientCount = n_distinct(PatientID),
DiagnosisCount = n_distinct(DiagnosisID)) %>%
mutate(DiagnosesPerPatient = DiagnosisCount / PatientCount),
# Gender
Gender = CohortDataSingleDiag %>%
group_by(Gender) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N)),
# Age Groups
Age = CohortDataSingleDiag %>%
select(PatientID, DiagnosisID, DiagnosisDate, PatientAgeAtDiagnosis) %>%
mutate(AgeGroup = case_when(PatientAgeAtDiagnosis < 18 ~ "< 18",
PatientAgeAtDiagnosis %>% between(18, 29) ~ "18 - 29",
PatientAgeAtDiagnosis %>% between(30, 39) ~ "30 - 39",
PatientAgeAtDiagnosis %>% between(40, 49) ~ "40 - 49",
PatientAgeAtDiagnosis %>% between(50, 59) ~ "50 - 59",
PatientAgeAtDiagnosis %>% between(60, 69) ~ "60 - 69",
PatientAgeAtDiagnosis %>% between(70, 79) ~ "70 - 79",
PatientAgeAtDiagnosis %>% between(80, 89) ~ "80 - 89",
PatientAgeAtDiagnosis > 89 ~ "> 89"),
AgeGroup = factor(AgeGroup,
levels = c("< 18", "18 - 29", "30 - 39", "40 - 49", "50 - 59", "60 - 69", "70 - 79", "80 - 89", "> 89"),
ordered = TRUE)) %>%
group_by(AgeGroup) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N))) %>%
ungroup() %>%
arrange(AgeGroup)
Characteristics <- list(# Cohort Size
Size = CohortData %>%
summarize(PatientCount = n_distinct(PatientID),
DiagnosisCount = n_distinct(DiagnosisID)) %>%
mutate(DiagnosesPerPatient = DiagnosisCount / PatientCount),
# Gender
Gender = CohortDataSingleDiag %>%
group_by(Gender) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N)),
# Age Groups
Age = CohortDataSingleDiag %>%
select(PatientID, DiagnosisID, DiagnosisDate, PatientAgeAtDiagnosis) %>%
mutate(AgeGroup = case_when(PatientAgeAtDiagnosis < 18 ~ "< 18",
PatientAgeAtDiagnosis %>% between(18, 29) ~ "18 - 29",
PatientAgeAtDiagnosis %>% between(30, 39) ~ "30 - 39",
PatientAgeAtDiagnosis %>% between(40, 49) ~ "40 - 49",
PatientAgeAtDiagnosis %>% between(50, 59) ~ "50 - 59",
PatientAgeAtDiagnosis %>% between(60, 69) ~ "60 - 69",
PatientAgeAtDiagnosis %>% between(70, 79) ~ "70 - 79",
PatientAgeAtDiagnosis %>% between(80, 89) ~ "80 - 89",
PatientAgeAtDiagnosis > 89 ~ "> 89"),
AgeGroup = factor(AgeGroup,
levels = c("< 18", "18 - 29", "30 - 39", "40 - 49", "50 - 59", "60 - 69", "70 - 79", "80 - 89", "> 89"),
ordered = TRUE)) %>%
group_by(AgeGroup) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N))) %>%
arrange(AgeGroup)
Characteristics <- list(# Cohort Size
Size = CohortData %>%
summarize(PatientCount = n_distinct(PatientID),
DiagnosisCount = n_distinct(DiagnosisID)) %>%
mutate(DiagnosesPerPatient = DiagnosisCount / PatientCount),
# Gender
Gender = CohortDataSingleDiag %>%
group_by(Gender) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N)),
# Age Groups
Age = CohortDataSingleDiag %>%
select(PatientID, DiagnosisID, DiagnosisDate, PatientAgeAtDiagnosis) %>%
mutate(AgeGroup = case_when(PatientAgeAtDiagnosis < 18 ~ "< 18",
PatientAgeAtDiagnosis %>% between(18, 29) ~ "18 - 29",
PatientAgeAtDiagnosis %>% between(30, 39) ~ "30 - 39",
PatientAgeAtDiagnosis %>% between(40, 49) ~ "40 - 49",
PatientAgeAtDiagnosis %>% between(50, 59) ~ "50 - 59",
PatientAgeAtDiagnosis %>% between(60, 69) ~ "60 - 69",
PatientAgeAtDiagnosis %>% between(70, 79) ~ "70 - 79",
PatientAgeAtDiagnosis %>% between(80, 89) ~ "80 - 89",
PatientAgeAtDiagnosis > 89 ~ "> 89"),
AgeGroup = factor(AgeGroup,
levels = c("< 18", "18 - 29", "30 - 39", "40 - 49", "50 - 59", "60 - 69", "70 - 79", "80 - 89", "> 89"),
ordered = TRUE)) %>%
group_by(AgeGroup) %>%
summarize(N = n()) %>%
mutate(Proportion = N / sum(N)) %>%
ungroup() %>%
arrange(AgeGroup))
Characteristics$Age
Gender_OverTime <- CohortDataSingleDiag %>%
mutate(DiagnosisYear = year(DiagnosisDate)) %>%
group_by(DiagnosisYear, Gender) %>%
summarize(N = n())
View(Gender_OverTime)
?pivot_wider
Gender_OverTime <- CohortDataSingleDiag %>%
mutate(DiagnosisYear = year(DiagnosisDate)) %>%
group_by(DiagnosisYear, Gender) %>%
summarize(N = n()) %>%
ungroup() %>%
pivot_wider(names_from = Gender,
values_from = N)
View(Gender_OverTime)
library(resourcer)
TestResource.res <- resourcer::newResource(name = "TestResource",
url = "file://./Development/Test/DummyData.csv",
format = "csv")
TestResource.client <- resourcer::newResourceClient(TestResource.res)
class(TestResource.client)
ObjectName.S <- "TestResource.client"
# Initiate output list
MetaData <- list()
if (exists(ObjectName.S, envir = parent.frame()))
{
Object <- get(ObjectName.S, envir = parent.frame())
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))
MetaData$Structure <- switch(class(Object) %in% c("list", "data.frame"),
data.frame(Element = MetaData$Names,
Type = MetaData$DataTypes,
row.names = NULL))
}
Object <- get(ObjectName.S, envir = parent.frame())
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
Object
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object) %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))
MetaData$Structure <- switch(class(Object) %in% c("list", "data.frame"),
data.frame(Element = MetaData$Names,
Type = MetaData$DataTypes,
row.names = NULL))
class(Object)
?switch
class(Object) %in% c("list", "data.frame")
sapply(Object, class)
class(Object)
Object
# Initiate output list
MetaData <- list()
if (exists(ObjectName.S, envir = parent.frame()))
{
Object <- get(ObjectName.S, envir = parent.frame())
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)[1]      # Some objects return more than one string as class info (e.g. ResourceClient objects). Take only first string for these cases.
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object)[1] %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))      # Return class/type of every element in 'Object'
MetaData$Structure <- switch(class(Object)[1] %in% c("list", "data.frame"),
data.frame(Element = MetaData$Names,
Type = MetaData$DataTypes,
row.names = NULL))
}
else { MetaData$ObjectExists <- FALSE }
if (exists(ObjectName.S, envir = parent.frame()))
{
Object <- get(ObjectName.S, envir = parent.frame())
MetaData$ObjectExists <- TRUE
MetaData$Class <- class(Object)[1]      # Some objects return more than one string as class info (e.g. ResourceClient objects). Take only first string for these cases.
MetaData$Length <- length(Object)
MetaData$RowCount <- nrow(Object)
MetaData$Names <- names(Object)
MetaData$DataTypes <- switch(class(Object)[1] %in% c("list", "data.frame"),      # Only apply if 'Object' is a list or a data.frame
sapply(Object, class))      # Return class/type of every element in 'Object'
MetaData$Structure <- switch(class(Object)[1] %in% c("list", "data.frame"),
data.frame(Element = MetaData$Names,
Type = MetaData$DataTypes,
row.names = NULL))
} else { MetaData$ObjectExists <- FALSE }
MetaData
install.packages("resourcer")
install.packages("resourcer")
library(devtools)
# use_package("cli")
# use_package("dplyr")
# use_package("DSI")
# use_package("DSOpal")
# use_package("lubridate")
# use_package("MatchIt")
# use_package("progress")
# use_package("readr", type = "Suggests")
# use_package("readxl", type = "Suggests")
use_package("resourcer")
?require
# DataSHIELD ASSIGN functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("AugmentDataDS")
# use_r("CurateDataDS")
# use_r("ExcludeRawDataDS")
# use_r("ExcludeAugmentedDataDS")
# use_r("ExcludeCuratedDataDS")
# use_r("ExtractFromListDS")
# use_r("JoinTablesDS")
use_r("LoadResourceDataDS")
View(Test)
?sapply
vapply(ADS, class)
sapply(ADS, class)
sapply(ADS$Diagnosis, class)
Test <- sapply(ADS$Events, class)
Test
Test[1,]
Test[,1]
matrix(1:12, nrow=4, ncol = 3)
Test(matrix(1:12, nrow=4, ncol = 3))
Test <- matrix(1:12, nrow=4, ncol = 3)
Test
as.vector(Test)
?apply
apply(Test, MARGIN = 1, paste, collapse = " ")
apply(Test, MARGIN = 1, paste, collapse = "/")
devtools::load_all(".")
install.packages("e1071")
?e1071::naiveBayes()
install.packages("Text2vec")
install.packages("text2vec")
?stringr::str_split()
?gsub
String <- "Ifaxizumab"
String <- str_to_lower(str_remove_all(String, pattern = " "))      # Delete all white space and make lower case
string
String
?sapply
?str_sub
#' GetNGrams
#'
#' Get n-gram tokens from a character string
#'
#' @param String \code{string}
#' @param n \code{integer} - Length of tokens - Default: 1
#' @keywords internal
#' @export
GetNGrams <- function(String,
n = 1)
{
require(stringr)
String <- str_to_lower(str_remove_all(String, pattern = " "))      # Delete all white space and make lower case
if (nchar(String) <= n) { return(String) }
NGrams <- sapply(X = 1:(nchar(String) - n + 1),
function(i) str_sub(String,
start = i,
end = i + n -1))
return(NGrams)
}
Test <- GetNGrams(String, n = 1)
Test
Test <- GetNGrams(String, n = 2)
GetNGrams(String, n = 2)
GetNGrams(String, n = 3)
GetNGrams(String, n = 4)
GetNGrams(String, n = 10)
GetNGrams(String, n = 12)
GetNGrams(String, n = 9)
GetNGrams(String = "ZUIjjfs askjf sdfkj", n = 1)
GetNGrams(String = "ZUIjjfs askjf sdfkj", n = 2)
GetNGrams(String = "ZUIjjfs askjf sdfkj", n = 100)
devtools::load_all(".")
devtools::load_all(".")
View(RawDataSet$RDS_SystemicTherapy)
RawData <- RawDataSet$RDS_SystemicTherapy$systemische_therapie_substanzen
RawData
?str_split
View(RawData)
Test <- str_split(RawData, ",")
unlist(Test)
Test <- unlist(str_split(RawData, "[,/]"))
Test <- RawData %>%
str_split(., "[,/]")
Test <- RawData %>%
str_split(., "[,/]") %>%
unlist()
Test <- RawData %>%
str_split("[,/]") %>%
unlist()
Test <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
View(as.data.frame(Test))
ATCCodes <- TinkerLab::ATCCodes
ATCCodes <- TinkerLab::ATCCodes %>%
distinct()
View(ATCCodes)
ATCCodes <- TinkerLab::ATCCodes %>%
distinct() %>%
filter(str_starts(ATCCode, pattern = "L"))
Substances <- TinkerLab::ATCCodes %>%
distinct() %>%
filter(str_starts(ATCCode, pattern = "L")) %>%
pull(NameGerman)
Substances <- TinkerLab::ATCCodes %>%
distinct() %>%
filter(str_starts(ATCCode, pattern = "L")) %>%
arrange(NameGerman) %>%
pull(NameGerman)
TestData <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
View(as.data.frame(TestData))
?itoken
library(text2vec)
Iterator <- itoken(iterable = TestData,
tokenizer = GetNGrams(),
progressbar = FALSE)
?create_vocabulary
Vocabulary <- create_vocabulary(it = Iterator)
?itoke
?itoken
Iterator <- itoken(iterable = TestData,
tokenizer = word_tokenizer,
n_chunks = 3,
progressbar = FALSE)
Vocabulary <- create_vocabulary(it = Iterator)
View(Vocabulary)
?vocab_vectorizer
Vectorizer <- vocab_vectorizer(Vocabulary)
?create_dtm
DTM <- create_dtm(it = Iterator,
vectorizer = Vectorizer)
Vectorizer
?sample.split
install.packages(caTools)
install.packages("caTools")
library(caTools)
TrainingData <- sample.split(TestData, SplitRatio = 0.7)
TrainingData
SplitIndicator <- sample.split(TestData, SplitRatio = 0.7)
TrainingData <- RawData[SplitIndicator]
PredictData <- RawData[!SplitIndicator]
PredictData <- TestData[!SplitIndicator]
TrainingData <- TestData[SplitIndicator]
PredictData <- TestData[!SplitIndicator]
TrainingData
Iterator <- itoken(iterable = TrainingData,
tokenizer = word_tokenizer,
n_chunks = 3,
progressbar = FALSE)
Vocabulary <- create_vocabulary(it = Iterator)
Vectorizer <- vocab_vectorizer(Vocabulary)
Iterator_Training <- itoken(iterable = TrainingData,
tokenizer = word_tokenizer,
n_chunks = 3,
progressbar = FALSE)
Vocabulary <- create_vocabulary(it = Iterator)
Vectorizer <- vocab_vectorizer(Vocabulary)
Iterator_Training <- itoken(iterable = TrainingData,
tokenizer = word_tokenizer,
n_chunks = 3,
progressbar = FALSE)
Vocabulary <- create_vocabulary(it = Iterator_Training)
Vectorizer <- vocab_vectorizer(Vocabulary)
Iterator.Training <- itoken(iterable = TrainingData,
tokenizer = word_tokenizer,
n_chunks = 3,
progressbar = FALSE)
Vocabulary <- create_vocabulary(it = Iterator.Training)
Vectorizer <- vocab_vectorizer(Vocabulary)
DTM.Training <- create_dtm(it = Iterator.Training,
vectorizer = Vectorizer)
PredictionData <- TestData[!SplitIndicator]
Iterator.Prediction <- itoken(iterable = PredictionData,
tokenizer = word_tokenizer,
n_chunks = 3,
progressbar = FALSE)
Vocabulary <- create_vocabulary(it = Iterator.Training)
Vectorizer <- vocab_vectorizer(Vocabulary)
DTM.Prediction <- create_dtm(it = Iterator.Prediction,
vectorizer = Vectorizer)
library(e1071)
Substances
library(TinkerLab)
library(caTools)
library(e1071)
library(text2vec)
library(TinkerLab)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
RawData <- RawDataSet$RDS_SystemicTherapy$systemische_therapie_substanzen
TestData <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
library(caTools)
library(dplyr)
library(e1071)
library(text2vec)
library(TinkerLab)
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
RawData <- RawDataSet$RDS_SystemicTherapy$systemische_therapie_substanzen
TestData <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
library(stringr)
TestData <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
View(as.data.frame(TestData))
RawDataSet <- readRDS(file = "../Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_Tables$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RawData <- RawDataSet$RDS_SystemicTherapy$systemische_therapie_substanzen
TestData <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
View(as.data.frame(TestData))
Substances <- TinkerLab::ATCCodes %>%
distinct() %>%
filter(str_starts(ATCCode, pattern = "L")) %>%
arrange(NameGerman) %>%
pull(NameGerman)
library(dsCCPhos)
library(dplyr)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- paste0("RDS_", dsCCPhos::Meta_Tables$TableName_Curated)
names(vc_Lookup) <- dsCCPhos::Meta_Tables$TableName_Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
library(caTools)
library(dplyr)
library(e1071)
library(stringr)
library(text2vec)
library(TinkerLab)
RawData <- RawDataSet$RDS_SystemicTherapy$systemische_therapie_substanzen
TestData <- RawData %>%
str_split("[,/]") %>%
unlist() %>%
unique()
View(as.data.frame(TestData))
Substances <- TinkerLab::ATCCodes %>%
distinct() %>%
filter(str_starts(ATCCode, pattern = "L")) %>%
arrange(NameGerman) %>%
pull(NameGerman)
Substances <- TinkerLab::ATCCodes %>%
distinct() %>%
filter(str_starts(ATCCode, pattern = "L")) %>%
arrange(NameGerman) %>%
pull(NameGerman)
DirtyData <- TinkerLab::MakeDirty(Substances)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
