mutate(Grading = dsCCPhos::RecodeData(Grading, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Histology" & Feature == "Grading"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(HistologyDate = format(as_datetime(HistologyDate), format = "%Y-%m-%d"))
}
if (tablename == "Metastasis")
{
Table <- Table %>%
#--- Recoding ------------------------------------------
mutate(Localization = dsCCPhos::RecodeData(Localization, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Metastasis" & Feature == "Localization"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting --------------------------------------
mutate(MetastasisDate = format(as_datetime(MetastasisDate), format = "%Y-%m-%d"),
HasMetastasis = as.logical(HasMetastasis))
}
if (tablename == "MolecularDiagnostics")
{
Table <- Table %>%
#--- Formatting ----------------------------
mutate(MolecularDiagnosticsDate = format(as_datetime(MolecularDiagnosticsDate), format = "%Y-%m-%d"))
}
if (tablename == "OtherClassification")
{
Table <- Table %>%
#--- Formatting ----------------------------
mutate(OtherClassificationDate = format(as_datetime(OtherClassificationDate), format = "%Y-%m-%d"))
}
if (tablename == "Patient")
{
Table <- Table %>%
#--- Recoding ------------------------------------------
mutate(Gender = dsCCPhos::RecodeData(Gender, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "Gender"),
set_names(Value_Curated, Value_Raw))),
LastVitalStatus = dsCCPhos::RecodeData(LastVitalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Patient" & Feature == "LastVitalStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(LastVitalStatusDate = format(as_datetime(LastVitalStatusDate), format = "%Y-%m-%d"))
}
if (tablename == "Progress")
{
Table <- Table %>%
#--- Recoding ------------------------------------------
mutate(GlobalStatus = dsCCPhos::RecodeData(GlobalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "GlobalStatus"),
set_names(Value_Curated, Value_Raw))),
PrimarySiteStatus = dsCCPhos::RecodeData(PrimarySiteStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "PrimarySiteStatus"),
set_names(Value_Curated, Value_Raw))),
LymphnodalStatus = dsCCPhos::RecodeData(LymphnodalStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "LymphnodalStatus"),
set_names(Value_Curated, Value_Raw))),
MetastasisStatus = dsCCPhos::RecodeData(MetastasisStatus, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Progress" & Feature == "MetastasisStatus"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------------
mutate(ProgressDate = format(as_datetime(ProgressDate), format = "%Y-%m-%d"))
#LocalRelapseDate = format(as_datetime(LocalRelapseDate), format = "%Y-%m-%d"))
}
if (tablename == "RadiationTherapy")
{
Table <- Table %>%
#--- Recoding ----------------------------------
mutate(RelationToSurgery = dsCCPhos::RecodeData(RelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RelationToSurgery"),
set_names(Value_Curated, Value_Raw))),
Intention = dsCCPhos::RecodeData(Intention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "Intention"),
set_names(Value_Curated, Value_Raw))),
ApplicationType = dsCCPhos::RecodeData(ApplicationType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "ApplicationType"),
set_names(Value_Curated, Value_Raw))),
RadiationType = dsCCPhos::RecodeData(RadiationType, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "RadiationTherapy" & Feature == "RadiationType"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting --------------------------------
mutate(RadiationTherapyStartDate = format(as_datetime(RadiationTherapyStartDate), format = "%Y-%m-%d"),
RadiationTherapyEndDate = format(as_datetime(RadiationTherapyEndDate), format = "%Y-%m-%d"))
}
if (tablename == "Staging")
{
Table <- Table %>%
#--- Recoding --------------------------------------------
mutate(UICCStage = dsCCPhos::RecodeData(UICCStage, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "UICCStage"),
set_names(Value_Curated, Value_Raw))),
TNM_T = dsCCPhos::RecodeData(TNM_T, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T"),
set_names(Value_Curated, Value_Raw))),
TNM_N = dsCCPhos::RecodeData(TNM_N, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N"),
set_names(Value_Curated, Value_Raw))),
TNM_M = dsCCPhos::RecodeData(TNM_M, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M"),
set_names(Value_Curated, Value_Raw))),
TNM_T_Prefix = dsCCPhos::RecodeData(TNM_T_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_T_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_N_Prefix = dsCCPhos::RecodeData(TNM_N_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_N_Prefix"),
set_names(Value_Curated, Value_Raw))),
TNM_M_Prefix = dsCCPhos::RecodeData(TNM_M_Prefix, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Staging" & Feature == "TNM_M_Prefix"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(StagingDate = format(as_datetime(StagingDate), format = "%Y-%m-%d"))
}
if (tablename == "Surgery")
{
Table <- Table %>%
#--- Recoding --------------------------------------------
mutate(Intention = dsCCPhos::RecodeData(Intention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "Intention"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentLocal = dsCCPhos::RecodeData(ResidualAssessmentLocal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentLocal"),
set_names(Value_Curated, Value_Raw))),
ResidualAssessmentTotal = dsCCPhos::RecodeData(ResidualAssessmentTotal, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "Surgery" & Feature == "ResidualAssessmentTotal"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ------------------------------------------
mutate(SurgeryDate = format(as_datetime(SurgeryDate), format = "%Y-%m-%d"))
}
if (tablename == "SystemicTherapy")
{
Table <- Table %>%
#--- Recoding ------------------------------------
mutate(Intention = dsCCPhos::RecodeData(Intention, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "Intention"),
set_names(Value_Curated, Value_Raw))),
RelationToSurgery = dsCCPhos::RecodeData(RelationToSurgery, with(dplyr::filter(dsCCPhos::Meta_ValueSets, Table == "SystemicTherapy" & Feature == "RelationToSurgery"),
set_names(Value_Curated, Value_Raw)))) %>%
#--- Formatting ----------------------------------
mutate(IsChemotherapy = as.logical(IsChemotherapy),
IsImmunotherapy = as.logical(IsImmunotherapy),
IsHormoneTherapy = as.logical(IsHormoneTherapy),
IsBoneMarrowTransplant = as.logical(IsBoneMarrowTransplant),
SystemicTherapyStartDate = format(as_datetime(SystemicTherapyStartDate), format = "%Y-%m-%d"),
SystemicTherapyEndDate = format(as_datetime(SystemicTherapyEndDate), format = "%Y-%m-%d"))
}
if (tablename == "TherapyRecommendation")
{
Table <- Table %>%
#--- Formatting ----------------------------
mutate(TherapyRecommendationDate = format(as_datetime(TherapyRecommendationDate), format = "%Y-%m-%d"))
}
return(Table)
} else { return(Table) }
})
# Check if object names in ls_TransformationTracks, DataSet and ls_MonitorMetaData are identical to avoid incorrect mapping
if (all(names(ls_TransformationTracks) == names(DataSet)) & all(names(DataSet) == names(ls_MonitorMetaData)))
{
ls_TransformationTracks <- purrr::pmap(.l = list(ls_TransformationTracks,
DataSet,
ls_MonitorMetaData),
.f = function(TransformationTracks, RecodedDataFrame, MonitorMetaData)
{
if (purrr::is_empty(MonitorMetaData) == FALSE)
{
RecodedValues <- RecodedDataFrame %>%
select(c("TrackID", names(MonitorMetaData))) %>%
rename_with(.fn = ~ str_c(., "__Recoded"),   # Two underscores for later use in pivot_longer()
.cols = all_of(names(MonitorMetaData)))
TransformationTracks %>%
left_join(RecodedValues,
by = join_by(TrackID)) %>%
distinct(pick(contains("__Raw")), .keep_all = TRUE)
}
else { return(data.frame()) }
})
} else {
stop("Internal error: Object names in ls_TransformationTracks, DataSet and ls_MonitorMetaData must be identical and in the same order.")
}
# Check if object names in DataSet and ls_MonitorMetaData are identical to avoid incorrect mapping
if (all(names(DataSet) == names(ls_MonitorMetaData)))
{
ls_ValueCounts_Recoded <- map2(.x = DataSet,
.y = ls_MonitorMetaData,
.f = function(DataFrame, MonitorMetaData)
{
DataFrame %>%
dsCCPhos::TrackValueCounts(FeatureNames = names(MonitorMetaData),
TransformationStage = "Recoded") %>%
select(Feature,
Value,
Frequency) %>%
rename(Value_Recoded = Value,
Count_Recoded = Frequency)
})
} else {
stop("Internal error: Object names in DataSet and ls_MonitorMetaData must be identical and in the same order.")
}
try(ProgressBar$tick())
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization_RuleProfile = "Default",
DiagnosisRedundancy_Check = TRUE,
DiagnosisRedundancy_Profile = "Default",
DiagnosisAssociation_Check = TRUE,
DiagnosisAssociation_Profile = "Default"))
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization_RuleProfile = "Default",
DiagnosisRedundancy_Check = TRUE,
DiagnosisRedundancy_Profile = "Default",
DiagnosisAssociation_Check = TRUE,
DiagnosisAssociation_Profile = "Default"))
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization_RuleProfile = "Default",
DiagnosisRedundancy_Check = TRUE,
DiagnosisRedundancy_Profile = "Default",
DiagnosisAssociation_Check = TRUE,
DiagnosisAssociation_Profile = "Default"))
CDS <- CurationOutput$CuratedDataSet
View(CDS$Diagnosis)
View(CDS$Histology)
?imap_int
devtools::load_all(".")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- dsCCPhos::CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization_RuleProfile = "Default",
DiagnosisRedundancy_Check = TRUE,
DiagnosisRedundancy_Profile = "Default",
DiagnosisAssociation_Check = TRUE,
DiagnosisAssociation_Profile = "Default"))
CDS <- CurationOutput$CuratedDataSet
CDS <- CurationOutput$CuratedDataSet
# Use require() to load package namespaces
require(dplyr)
require(lubridate)
require(purrr)
require(stringr)
require(tidyr)
# Suppress summarize info messages
options(dplyr.summarise.inform = FALSE)
# Initiate output objects
ls_AugmentedDataSet <- NULL
ls_AugmentationReport <- NULL
# Initiate Messaging objects
Messages <- list()
Messages$CheckAugmentationCompletion <- "red"
Messages$FinalMessage <- "Augmentation not completed"
#--- Set up progress bar -------------------------------------------------------
CountProgressItems <- 17
ProgressBar <- progress_bar$new(format = "Generating diagnosis-related events [:bar] :percent in :elapsed  :spin",
total = CountProgressItems, clear = FALSE, width = 100)
try(ProgressBar$tick())
# Initiation 1: Initial diagnosis event
df_ADS_Events <- CDS$Patient %>%
right_join(CDS$Diagnosis, join_by(PatientID)) %>%
filter(IsReferenceEntry == TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
mutate(EventType = "Point",
EventDate = DiagnosisDate,
EventDateEnd = NULL,      # For events of type "Period"
EventDateIsAdjusted = FALSE,      # In case event date is adjusted later for plausibility reasons
EventClass = "Diagnosis",
EventSubclass = "InitialDiagnosis",
EventRankWithinSubclass = row_number(),
EventOrderSignificance = NULL) %>%
nest(EventDetails = c(ICD10Code,
ICDOTopographyCode,
ICDOMorphologyCode,
Grading)) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
DiagnosisDate,
starts_with("Event"))
#--- Update PB ---
try(ProgressBar$tick())
# Initiation 2: Last known vital status
df_Events_LastVitalStatus <- CDS$Patient %>%
right_join(CDS$Diagnosis, join_by(PatientID)) %>%
filter(IsReferenceEntry == TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
mutate(EventType = "Point",
EventDate = LastVitalStatusDate,
EventDateIsAdjusted = FALSE,
EventClass = "VitalStatus",
EventSubclass = if_else(is.na(LastVitalStatus), "Unknown", LastVitalStatus)) %>%
nest(EventDetails = c(DeathCancerRelated,
CausesOfDeath)) %>%
ungroup() %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
DiagnosisDate,
starts_with("Event"))
#--- Update PB ---
try(ProgressBar$tick())
# Initiation 3: Row-bind data frames from Initiation 1 and 2
df_ADS_Events <- df_ADS_Events %>%
bind_rows(df_Events_LastVitalStatus)
try(ProgressBar$tick())
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Loop through CDS tables to generate event data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EventData <- CDS[names(CDS) %in% c("Patient", "Diagnosis") == FALSE] %>%      # Deselect tables 'Patient' and 'Diagnosis' from CDS
imap(function(Table, tablename)
{
try(ProgressBar$tick())
GroupingFeature <- NULL
DateFeature <- NULL
EndDateFeature <- NULL
Val_EventType <- NA
Val_EventClass <- NA
Val_EventSubclass <- NA
EventDetailsFeatures <- NULL
if (tablename == "BioSampling")
{
GroupingFeature <- "PatientID"
DateFeature <- "BioSamplingDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Sample Taking"
EventDetailsFeatures <- c("Aliquot",
"Type",
"Status",
"Quantity",
"Unit",
"ProjectName")
}
if (tablename == "Histology")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "HistologyDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Histology"
EventDetailsFeatures = c("ICDOMorphologyCode",
"ICDOMorphologyVersion",
"Grading",
"ICDOMorphologyComment")
}
if (tablename == "Metastasis")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "MetastasisDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Metastasis"
EventDetailsFeatures = c("HasMetastasis",
"Localization")
}
if (tablename == "MolecularDiagnostics")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "MolecularDiagnosticsDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnostics"
Val_EventSubclass <- "Molecular Diagnostics"
EventDetailsFeatures = c("MolecularMarker",
"MolecularMarkerStatus",
"Documentation")
}
if (tablename == "Progress")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "ProgressDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Progress"
EventDetailsFeatures = c("GlobalStatus",
"PrimarySiteStatus",
"LymphnodalStatus",
"MetastasisStatus")
}
if (tablename == "RadiationTherapy")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "RadiationTherapyStartDate"
EndDateFeature <- "RadiationTherapyEndDate"
Val_EventType <- "Period"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "Radiation Therapy"
EventDetailsFeatures = c("Intention",
"RelationToSurgery")
}
if (tablename == "Staging")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "StagingDate"
Val_EventType <- "Point"
Val_EventClass <- "Diagnosis"
Val_EventSubclass <- "Staging"
EventDetailsFeatures = c("UICCStage",
"TNM_T_Prefix",
"TNM_T",
"TNM_N_Prefix",
"TNM_N",
"TNM_M_Prefix",
"TNM_M",
"TNM_mSymbol",
"TNM_rSymbol",
"TNM_ySymbol",
"TNMVersion",
"TNM_L",
"TNM_V",
"TNM_Pn",
"TNM_S")
}
if (tablename == "Surgery")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "SurgeryDate"
Val_EventType <- "Point"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "Surgery"
EventDetailsFeatures = c("Intention",
"OPSCode",
"ResidualAssessmentLocal",
"ResidualAssessmentTotal")
}
if (tablename == "SystemicTherapy")
{
GroupingFeature <- c("PatientID", "DiagnosisID")
DateFeature <- "SystemicTherapyStartDate"
EndDateFeature <- "SystemicTherapyEndDate"
Val_EventType <- "Period"
Val_EventClass <- "Therapy"
Val_EventSubclass <- "SystemicTherapy"
EventDetailsFeatures = c("Intention",
"Substances",
"RelationToSurgery")
}
if (!(is.null(Table) | length(Table) == 0 | nrow(Table) == 0))
{
if (length(GroupingFeature) == 1) { TableEventData <- Table %>% group_by(PatientID) }
else { TableEventData <- Table %>% group_by(PatientID, DiagnosisID) }
TableEventData <- TableEventData %>%
arrange(!!sym(DateFeature), .by_group = TRUE) %>%
mutate(EventType = Val_EventType,
EventDate = !!sym(DateFeature),
EventDateIsAdjusted = FALSE,      # In case event date is adjusted later for plausibility reasons
EventClass = Val_EventClass,
EventSubclass = Val_EventSubclass,
EventRankWithinSubclass = row_number(),
EventOrderSignificance = case_when(row_number() == 1 ~ paste("First", Val_EventSubclass),
row_number() == n() ~ paste("Last", Val_EventSubclass),
TRUE ~ NA_character_)) %>%
{ if (!is.null(EndDateFeature))
{ mutate(., EventDateEnd = !!sym(EndDateFeature), .after = EventDate) }      # For events of type "Period"
else {.}
} %>%
nest(EventDetails = all_of(EventDetailsFeatures)) %>%
ungroup() %>%
select(all_of(GroupingFeature),
starts_with("Event"))
return(TableEventData)
}
else { return(NULL) }
}) %>%
list_rbind()
# Consolidate Event-oriented data from CDS tables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df_ADS_Events <- df_ADS_Events %>%
bind_rows(EventData) %>%
group_by(PatientID) %>%
fill(DateOfBirth,
.direction = "downup") %>%
group_by(PatientID, DiagnosisID) %>%
filter(!is.na(EventDate)) %>%
arrange(EventDate, .by_group = TRUE) %>%
# Important adjustment!
mutate(FirstEventDate = min(EventDate, na.rm = TRUE),
LastEventDate = max(EventDate, na.rm = TRUE),
EventDateIsAdjusted = case_when(EventSubclass == "InitialDiagnosis" & EventDate > FirstEventDate ~ TRUE,
EventClass == "VitalStatus" & EventDate < LastEventDate ~ TRUE,
.default = FALSE),
EventDate = case_when(EventSubclass == "InitialDiagnosis" ~ FirstEventDate,
EventClass == "VitalStatus" ~ LastEventDate,
.default = EventDate),
InitialDiagnosisDate = FirstEventDate,
EventRank = row_number(),
EventDaysSinceDiagnosis = round(as.numeric(difftime(EventDate, InitialDiagnosisDate, units = "days")), digits = 1),
EventPatientAge = floor(time_length(difftime(EventDate, DateOfBirth), unit = "years"))) %>%
select(PatientID,
DateOfBirth,
DiagnosisID,
InitialDiagnosisDate,
EventRank,
EventType,
EventDate,
EventDateEnd,
EventDateIsAdjusted,
EventPatientAge,
EventDaysSinceDiagnosis,
EventClass,
EventSubclass,
EventRankWithinSubclass,
EventOrderSignificance,
EventDetails) %>%
ungroup()
#--- Update PB ---
try(ProgressBar$tick())
#--- Terminate PB ---
try(ProgressBar$terminate())
View(df_ADS_Events)
View(unnest(df_ADS_Events, keep_empty = TRUE))
# For function testing purposes
EventEntries <- df_ADS_Events %>%
filter(PatientID == "Pat_2063") %>%
unnest(cols = c(EventDetails), keep_empty = TRUE)
View(EventEntries)
?ClassifyDiagnosisAssociation
# Summarize diagnosis-specific event data using dsCCPhos::SummarizeEventData()
df_Aux_DiagnosisSummary_Events <- df_ADS_Events %>%
unnest(cols = c(EventDetails), keep_empty = TRUE) %>%
group_by(PatientID, DiagnosisID) %>%
group_modify(~ SummarizeEventData(EventEntries = .x,
ProgressBarObject = NULL)) %>%
ungroup()
devtools::load_all(".")
CDS <- CurationOutput$CuratedDataSet
AugmentationOutput <- dsCCPhos::AugmentDataDS(CuratedDataSetName.S = "CDS")
ADS <- AugmentationOutput$AugmentedDataSet
View(ADS$Patients)
devtools::load_all(".")
devtools::load_all(".")
