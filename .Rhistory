map(\(tablename) Meta.ADS.Module %>%
filter(TableName == tablename) %>%
pull(FeatureName) %>%
unique()) %>%
set_names(nm = RequiredTableNames.S)
# Get sets of eligible value sets as a list of lists of character vectors
EligibleValueSets.S <- RequiredTableNames.S %>%
map(function(tablename)
{
RelevantFeatures <- Meta.ADS.Module %>%
filter(TableName == tablename,
HasEligibleValueSet == TRUE) %>%
pull(FeatureName) %>%
unique()
ValueSet <- RelevantFeatures %>%
map(\(featurename) Meta.ADS.Module %>%
filter(TableName == tablename,
FeatureName == featurename) %>%
pull(Value)) %>%
set_names(nm = RelevantFeatures)
return(ValueSet)
}) %>%
set_names(nm = RequiredTableNames.S)
# Create Table check templates for all required Data Set tables ("assume as empty/missing")
DataSetCheckTemplate <- RequiredTableNames.S %>%
map(function(tablename)
{
CheckTable(Table = NULL,
RequiredFeatureNames = RequiredFeatureNames.S[[tablename]])
}) %>%
set_names(RequiredTableNames.S)
# Go through actually existing tables in 'DataSet' and check for feature completeness as well as feature types, row counts and rates of non-missing values
DataSetCheckExisting <- DataSet %>%
imap(function(Table, tablename)
{
if (length(Table) > 0 && nrow(Table) > 0)
{
CheckTable(Table = Table,
RequiredFeatureNames = RequiredFeatureNames.S[[tablename]],
EligibleValueSets = EligibleValueSets.S[[tablename]])
}
else { return(NULL) }
}) %>%
compact()      # This removes all NULL elements from list
# Replace info in TableCheckTemplate with info about existing tables to get coherent summary
DataSetCheck <- DataSetCheckTemplate %>%
imap(function(Table, tablename)
{
if (tablename %in% names(DataSetCheckExisting)) { return(DataSetCheckExisting[[tablename]]) }
else { return(Table) }
})
View(DataSetCheck$Therapy$FeatureCheckOverview)
library(dplyr)
library(dsFreda)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RDSTableCheck <- dsFreda::GetDataSetCheckDS(DataSetName.S = "RawDataSet",
Module.S = "CCP",
Stage.S = "Raw")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization = list(Run = TRUE,
Profile = "Default"),
FeatureObligations = list(Profile = "Default"),
FeatureTracking = list(Profile = "Default"),
TableCleaning = list(Run = TRUE)))
CuratedDataSet <- CurationOutput$CuratedDataSet
CDSTableCheck <- dsFreda::GetDataSetCheckDS(DataSetName.S = "CuratedDataSet",
Module.S = "CCP",
Stage.S = "Curated")
AugmentationOutput <- AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
ADSTableCheck <- GetDataSetCheckDS(DataSetName.S = "ADS",
Module.S = "CCP",
Stage.S = "Augmented")
(ADSTableCheck$Events$FeatureCheckOverview)
View(ADSTableCheck$Events$FeatureCheckOverview)
devtools::load_all(".")
library(dplyr)
library(readxl)
library(usethis)
Set.Privacy <- list(Profile = "loose",     # Optional: 'strict', 'loose'
NThreshold = 5)
# Save data in .rda-file and make it part of package
use_data(Set.Privacy, overwrite = TRUE)
devtools::load_all(".")
library(dplyr)
library(dsFreda)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RDSTableCheck <- dsFreda::GetDataSetCheckDS(DataSetName.S = "RawDataSet",
Module.S = "CCP",
Stage.S = "Raw")
RawDataSet <- DrawSampleDS(RawDataSetName.S = "RawDataSet",
SampleSize.S = 1000)
# --- For Testing Purposes ---
RawDataSetName.S <- "RawDataSet"
SampleSize.S <- 2000
# --- Argument Validation ---
assert_that(is.string(RawDataSetName.S),
is.count(SampleSize.S))
# Get local object: Parse expression and evaluate
RawDataSet <- eval(parse(text = RawDataSetName.S), envir = parent.frame())
AllPatientIDs <- RawDataSet$RDS_Patient$"_id"
AllPatientIDs <- RawDataSet$RDS.Patient$"_id"
AllPatientIDs <- RawDataSet$Patient$"_id"
#AllPatientIDs <- RawDataSet$Patient$PatientID
AvailableNumberPatients <- length(unique(AllPatientIDs))
# Reduce SampleSize.S if necessary
if (SampleSize.S > AvailableNumberPatients) { SampleSize.S <- AvailableNumberPatients }
# Get a random sample of PatientIDs
SampleIDs <- sample(AllPatientIDs,
size = SampleSize.S)
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(function(Table, tablename)
{
if (length(Table) > 0 && nrow(Table) > 0)
{
if (tablename == "RDS.Patient") { return(filter(Table, Table$'_id' %in% SampleIDs)) }
else if (tablename %in% c("RDS.GeneralCondition", "RDS.OtherClassification", "RDS.TherapyRecommendation")) { return(filter(Table, Table$PatientID %in% SampleIDs)) }
else { return(filter(Table, Table$'patient-id' %in% SampleIDs)) }
}
else { return(NULL) }
})
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(function(Table, tablename)
{
if (length(Table) > 0 && nrow(Table) > 0)
{
if (tablename == "Patient") { return(filter(Table, Table$'_id' %in% SampleIDs)) }
else if (tablename %in% c("GeneralCondition", "OtherClassification", "TherapyRecommendation")) { return(filter(Table, Table$PatientID %in% SampleIDs)) }
else { return(filter(Table, Table$'patient-id' %in% SampleIDs)) }
}
else { return(NULL) }
})
devtools::load_all(".")
RawDataSet <- DrawSampleDS(RawDataSetName.S = "RawDataSet",
SampleSize.S = 1000)
View(Meta.ADS)
View(dsCCPhos::Meta.ADS)
devtools::load_all(".")
library(dplyr)
library(dsFreda)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- CurateDataDS(RawDataSetName.S = "RawDataSet",
Settings.S = list(DataHarmonization = list(Run = TRUE,
Profile = "Default"),
FeatureObligations = list(Profile = "Default"),
FeatureTracking = list(Profile = "Default"),
TableCleaning = list(Run = TRUE)))
CuratedDataSet <- CurationOutput$CuratedDataSet
AugmentationOutput <- AugmentDataDS(CuratedDataSetName.S = "CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
View(ADS$Diagnosis)
Test <- ADS$Diagnosis
typeof(Test$DiagnosisDate)
?typeof
class(Test$DiagnosisDate)
class(Test$SubDiagnosisID)
class(Test$PatientAgeAtDiagnosis)
class(Test$NumberLymphnodesExamined)
class(Test$HistologyDate)
devtools::load_all(".")
library(dplyr)
library(dsFreda)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(RawDataSet) <- sapply(names(RawDataSet),
function(TableName) { vc_Lookup[TableName] })
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
CCP.RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(RawDataSet) <- sapply(names(CCP.RawDataSet),
function(TableName) { vc_Lookup[TableName] })
names(CCP.RawDataSet) <- sapply(names(CCP.RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RDSPreparation <- PrepareRawDataDS(RawDataSetName.S = "CCP.RawDataSet",
Module.S = "CCP",
CurateFeatureNames.S = TRUE)
CCP.RawDataSet <- RDSPreparation$RawDataSet
RDSTableCheck <- dsFreda::GetDataSetCheckDS(DataSetName.S = "CCP.RawDataSet",
Module.S = "CCP",
Stage.S = "Raw")
# --- For Testing Purposes ---
RawDataSetName.S <- "CCP.RawDataSet"
SampleSize.S <- 2000
# Get local object: Parse expression and evaluate
RawDataSet <- eval(parse(text = RawDataSetName.S), envir = parent.frame())
AllPatientIDs <- RawDataSet$Patient$PatientID
AvailableNumberPatients <- length(unique(AllPatientIDs))
# Reduce SampleSize.S if necessary
if (SampleSize.S > AvailableNumberPatients) { SampleSize.S <- AvailableNumberPatients }
# Get a random sample of PatientIDs
SampleIDs <- sample(AllPatientIDs,
size = SampleSize.S)
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(function(Table, tablename)
{
if (length(Table) > 0 && nrow(Table) > 0)
{
return(filter(Table, Table$PatientID %in% SampleIDs))
# OLD (before preparational recoding of feature names)
# if (tablename == "Patient") { return(filter(Table, Table$'_id' %in% SampleIDs)) }
# else if (tablename %in% c("GeneralCondition", "OtherClassification", "TherapyRecommendation")) { return(filter(Table, Table$PatientID %in% SampleIDs)) }
# else { return(filter(Table, Table$'patient-id' %in% SampleIDs)) }
}
else { return(NULL) }
})
library(purrr)
# Subset RDS tables with sampled PatientIDs
RawDataSetSample <- RawDataSet %>%
imap(function(Table, tablename)
{
if (length(Table) > 0 && nrow(Table) > 0)
{
return(filter(Table, Table$PatientID %in% SampleIDs))
# OLD (before preparational recoding of feature names)
# if (tablename == "Patient") { return(filter(Table, Table$'_id' %in% SampleIDs)) }
# else if (tablename %in% c("GeneralCondition", "OtherClassification", "TherapyRecommendation")) { return(filter(Table, Table$PatientID %in% SampleIDs)) }
# else { return(filter(Table, Table$'patient-id' %in% SampleIDs)) }
}
else { return(NULL) }
})
devtools::load_all(".")
CCP.RawDataSet <- DrawSampleDS(RawDataSetName.S = "CCP.RawDataSet",
SampleSize.S = 1000)
library(dplyr)
library(readxl)
library(usethis)
ExcelFilePath <- "./Development/Data/PackageData/PackageDataCCPhos.xlsx"
Sheetnames <- c("Meta.Tables",
"Meta.Features",
"Meta.Values",
"Proc.EventFeatures",
"Proc.TableNormalization",
"Set.FeatureObligations",
"Set.FeatureTracking",
"Set.DataHarmonization",
"Set.TransformativeExpressions",
"Set.Dictionary",
"Set.FuzzyStringMatching",
"Set.DiagnosisRedundancy",
"Set.DiagnosisAssociation")
for (sheetname in Sheetnames)
{
Table <- read_excel(path = ExcelFilePath,
sheet = sheetname,
skip = 2,
col_types = "text")
ColumnTypes <- read_excel(path = ExcelFilePath,
sheet = sheetname,
range = cell_rows(2),
col_names = colnames(Table)) %>%
tidyr::pivot_longer(everything(),
names_to = "Column",
values_to = "Type")
if (nrow(ColumnTypes) > 0)
{
for (i in 1:nrow(ColumnTypes))
{
Table <- Table %>%
mutate(across(all_of(ColumnTypes$Column[i]),
~ dsFreda::FormatData(.x, ColumnTypes$Type[i])))
}
}
assign(x = sheetname,
value = Table)
# Save data in .rda-file and make it part of the package
do.call(use_data, list(as.name(sheetname), overwrite = TRUE))
}
library(dplyr)
library(readxl)
library(usethis)
Test <- Meta.ADS
devtools::load_all(".")
Test <- Meta.ADS
View(Test)
library(dplyr)
library(dsFreda)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
CCP.RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(CCP.RawDataSet) <- sapply(names(CCP.RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RDSPreparation <- PrepareRawDataDS(RawDataSetName.S = "CCP.RawDataSet",
Module.S = "CCP",
CurateFeatureNames.S = TRUE)
CCP.RawDataSet <- RDSPreparation$RawDataSet
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- CurateDataDS(RawDataSetName.S = "CCP.RawDataSet",
Settings.S = list(DataHarmonization = list(Run = TRUE,
Profile = "Default"),
FeatureObligations = list(Profile = "Default"),
FeatureTracking = list(Profile = "Default"),
TableCleaning = list(Run = TRUE)))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load CCP test data as raw data set
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#RawDataSet <- readRDS(file = "./Development/Data/RealData/CCPRealData_Frankfurt.rds")
#OldTestData <- readRDS(file = "./Development/Data/TestData/OldTestData/CCPTestData.rds")
CCP.RawDataSet <- readRDS(file = "./Development/Data/TestData/CCPTestData.rds")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename tables of RawDataSet (the names are also changed when tables are being loaded into R server sessions)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vc_Lookup <- dsCCPhos::Meta.Tables$TableName.Curated
names(vc_Lookup) <- dsCCPhos::Meta.Tables$TableName.Raw
names(CCP.RawDataSet) <- sapply(names(CCP.RawDataSet),
function(TableName) { vc_Lookup[TableName] })
RDSPreparation <- PrepareRawDataDS(RawDataSetName.S = "CCP.RawDataSet",
Module.S = "CCP",
RunFuzzyStringMatching.S = FALSE,
CurateFeatureNames.S = TRUE)
CCP.RawDataSet <- RDSPreparation$RawDataSet
RDSTableCheck <- dsFreda::GetDataSetCheckDS(DataSetName.S = "CCP.RawDataSet",
Module.S = "CCP",
Stage.S = "Raw")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Curate data
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CurationOutput <- CurateDataDS(RawDataSetName.S = "CCP.RawDataSet",
Settings.S = list(DataHarmonization = list(Run = TRUE,
Profile = "Default"),
FeatureObligations = list(Profile = "Default"),
FeatureTracking = list(Profile = "Default"),
TableCleaning = list(Run = TRUE)))
CCP.CuratedDataSet <- CurationOutput$CuratedDataSet
AugmentationOutput <- AugmentDataDS(CuratedDataSetName.S = "CCP.CuratedDataSet")
ADS <- AugmentationOutput$AugmentedDataSet
# Extract table and feature names from ADS tables
Meta.ADS <- ADS %>%
imap(\(Table, tablename) tibble(TableName = tablename,
FeatureName = names(Table),
Type = sapply(Table, class))) %>%
list_rbind()
View(Meta.ADS)
# Get eligible values and labels from CDS features
CDSValues <- Meta.Values %>%
select(FeatureName.Curated,
ScaleLevel,
Value.Curated,
Label.Curated) %>%
rename(c("FeatureName" = "FeatureName.Curated",
"Value" = "Value.Curated",
"Label" = "Label.Curated")) %>%
mutate(HasEligibleValueSet = TRUE,
FeatureIsFromCDS = TRUE)
# Attach eligible values and labels to ADS features
Meta.ADS <- Meta.ADS %>%
left_join(CDSValues,
by = join_by(FeatureName),
relationship = "many-to-many")
View(Meta.ADS)
# Extract table and feature names from ADS tables
Meta.ADS <- ADS %>%
imap(\(Table, tablename) tibble(TableName = tablename,
FeatureName = names(Table),
Type = sapply(Table, class))) %>%
list_rbind()
# Get eligible values and labels from CDS features
CDSValues <- Meta.Values %>%
select(FeatureName.Curated,
Value.Curated,
Label.Curated) %>%
rename(c("FeatureName" = "FeatureName.Curated",
"Value" = "Value.Curated",
"Label" = "Label.Curated")) %>%
mutate(HasEligibleValueSet = TRUE,
FeatureIsFromCDS = TRUE)
# Attach eligible values and labels to ADS features
Meta.ADS <- Meta.ADS %>%
left_join(CDSValues,
by = join_by(FeatureName),
relationship = "many-to-many")
Test <- Meta.ADS %>%
Temp <- Meta.ADS %>%
distinct(TableName, FeatureName, Type)
View(Temp)
# Add feature indicating if feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
View(Meta.ADS)
# Extract table and feature names from ADS tables
Meta.ADS <- ADS %>%
imap(\(Table, tablename) tibble(TableName = tablename,
FeatureName = names(Table),
FeatureType = sapply(Table, class))) %>%
list_rbind()
# Get eligible values and labels from CDS features
CDSValues <- Meta.Values %>%
select(FeatureName.Curated,
Value.Curated,
Label.Curated) %>%
rename(c("FeatureName" = "FeatureName.Curated",
"Value" = "Value.Curated",
"Label" = "Label.Curated")) %>%
mutate(HasEligibleValueSet = TRUE,
FeatureIsFromCDS = TRUE)
# Attach eligible values and labels to ADS features
Meta.ADS <- Meta.ADS %>%
left_join(CDSValues,
by = join_by(FeatureName),
relationship = "many-to-many")
# Add feature indicating if feature should be part of an "order list" that can be passed to dsFredaClient::GetExplorationData()
Meta.ADS <- Meta.ADS %>%
mutate(ExploreRoutinely = case_when(TableName == "Events" & FeatureName %in% c("EventClass",
"EventSubclass") ~ TRUE,
TableName == "Diagnosis" & FeatureName %in% c("ICD10Code",
"ICDOTopographyCode",
"LocalizationSide",
"ICDOMorphologyCode",
"Grading",
"UICCStage",
"UICCStageCategory",
"TNM.T",
"TNM.N",
"TNM.M",
"PatientAgeAtDiagnosis",
"TimeDiagnosisToDeath",
"TimeFollowUp") ~ TRUE,
TableName == "Patient" & FeatureName %in% c("Sex",
"LastVitalStatus",
"CausesOfDeath",
"CountDiagnoses") ~ TRUE,
.default = FALSE))
